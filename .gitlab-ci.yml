image: node:19.6

before_script:
  - apt-get update && apt-get install -y curl
  - curl -sL https://deb.nodesource.com/setup_19.x | bash -
  - apt-get install -y nodejs
  - yarn install -y
  - mkdir front-build/
  - mkdir core-build/
  - mkdir backend-build/
  - mkdir client-build/
  - yarn workspace @TRPI/core build
  - cp -r ./packages/core/dist ./core-build/ || true
  - echo "core build"
  - ls ./core-build

stages:
  - build
  - deploy

frontend:
  stage: build
  script:
    - yarn workspace @TRPI/frontend build
    - rm -R ./front-build && mkdir front-build/
    - cp -r ./apps/frontend/dist  ./front-build/ || true
    - echo "front build"
    - ls ./front-build

backend:
  stage: build
  script:
    - echo $CI_PIPELINE_SUCCESS
    - echo $CI_COMMIT_BRANCH
    - yarn workspace @TRPI/backend build
    - rm -R ./backend-build && mkdir ./backend-build/
    - cp -r ./apps/backend/dist  ./backend-build/ || true
    - echo "backend build"
    - ls ./backend-build


deploy:
  stage: deploy
  rules:
    - if: '$CI_PIPELINE_SUCCESS && $CI_COMMIT_BRANCH == "test/dep"'
  script:
    - export RELEASE_BRANCH_NAME="release-$(printf '%02d' $((10#${CI_COMMIT_REF_NAME#release-}+1)))"
    - git checkout -b $RELEASE_BRANCH_NAME
    - find . -maxdepth 1 -type f ! -name 'core-build' ! -name 'frontend-build' ! -name 'backend-build' ! -name 'client-build' -delete
    - find . -maxdepth 1 -type d ! -name '.' ! -name 'core-build' ! -name 'frontend-build' ! -name 'backend-build' ! -name 'client-build' -exec rm -rf {} \;
    - cp -r ./core-build ./frontend-build ./backend-build ./client-build ./
    - git add .
    - git commit -m "Release build ${CI_COMMIT_SHORT_SHA}"
    - git push origin $RELEASE_BRANCH_NAME

# backend:
#   stage: build
#   script:
#     - cd backend
#     - yarn install
#     - yarn build

# client:
#   stage: build
#   script:
#     - cd client
#     - yarn install
#     - yarn build

# core:
#   stage: build
#   script:
#     - cd core
#     - yarn install
#     - yarn build


# deploy:
#   stage: deploy
#   script:
#     - echo 'deploy test'
#   only:
#     - master
# server:
#   stage: server
#   script:
#     - ssh vmProjetIntegrateurgrp0-1
#     - echo 'server build'
#   only:
#     changes:
#       - apps/backend/**/*
#   dependencies:
#     - ssh-prepare

# front:
#   stage: front
#   script:
#     - ssh vmProjetIntegrateurgrp0-1
#     - echo 'front build'
#   only:
#     changes:
#       - apps/frontend/**/*
#   dependencies:
#     - ssh-prepare
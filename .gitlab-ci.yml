before_script:
  - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
  - export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  - nvm install 19.6.0
  - nvm use 19.6.0
  - rm -r ~/BUILDS || true


stages:
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}-dependencies
  paths:
    - .yarn/cache
    - node_modules/
    - apps/backend/node_modules/
    - apps/client/node_modules/
    - apps/frontend/node_modules/
    - packages/core/node_modules/
    - packages/eslint-config-custom/node_modules/
  policy: pull-push
  untracked: true

build_core:
  stage: build
  script:
    - mkdir ~/BUILDS && mkdir ~/BUILDS/core && mkdir ~/BUILDS/core/dist
    - yarn install --frozen-lockfile
    - yarn workspace @TRPI/core build
  artifacts:
    paths:
      - ~/BUILDS/core/dist

build_backend:
  stage: build
  needs: ["build_core"]
  script:
    - yarn install --frozen-lockfile
    - yarn workspace @TRPI/backend build
  artifacts:
    paths:
      - BUILDS/backend/dist

build_frontend:
  stage: build
  needs: ["build_core"]
  script:
    - mkdir ~/BUILDS && mkdir ~/BUILDS/frontend && mkdir ~/BUILDS/frontend/dist
    - yarn install --frozen-lockfile
    - yarn workspace @TRPI/frontend build
    - cp -r ./apps/frontend/dist ~/BUILDS/frontend/dist
  artifacts:
    paths:
      - ~/BUILDS/frontend/dist

deploy_backend:
  stage: deploy
  only:
    - dev
  needs: ["build_backend"]
  script:
    - sudo -u ubuntu screen -S backend -X quit || true
    - sudo -u ubuntu screen -dmS backend
    - echo 'deploiement du backend pas disponible pour l'instant

deploy_frontend:
  stage: deploy
  only:
    - dev
  needs: ["build_frontend"]
  script:
    - sudo -u ubuntu screen -S frontend -X quit || true
    - sudo -u ubuntu screen -dmS frontend
    - sudo -u ubuntu screen -S frontend -X stuff "cd ~/BUILDS/frontend/dist; npx serve -l 1000$(printf '\r')"
before_script:
  - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
  - export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  - nvm install 19.6.0
  - nvm use 19.6.0
  - rm -r ./BUILDS || true

stages:
  - .pre
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}-dependencies
  paths:
    - .yarn/cache
    - node_modules/
    - apps/backend/node_modules/
    - apps/client/node_modules/
    - apps/frontend/node_modules/
    - packages/core/node_modules/
    - packages/eslint-config-custom/node_modules/
  policy: pull-push
  untracked: true

install_dependencies:
  stage: .pre
  script:
    - yarn install --frozen-lockfile
  cache:
    key: ${CI_COMMIT_REF_SLUG}-dependencies
    paths:
      - .yarn/cache
      - node_modules/
      - apps/backend/node_modules/
      - apps/client/node_modules/
      - apps/frontend/node_modules/
      - packages/core/node_modules/
      - packages/eslint-config-custom/node_modules/
    policy: pull-push
    untracked: true
  only:
    changes:
      - apps/backend/package.json
      - apps/client/package.json
      - apps/frontend/package.json
      - packages/core/package.json
      - packages/eslint-config-custom/package.json

.build_template: &build_cache
  cache:
    key: ${CI_COMMIT_REF_SLUG}-builds
    paths:
      - ./BUILDS/
    policy: pull-push

build_core:
  stage: build
  <<: *build_cache
  script:
    - mkdir -p ./BUILDS/core/dist
    - yarn workspace @TRPI/core build

build_backend:
  stage: build
  <<: *build_cache
  needs: ["build_core"]
  script:
    - mkdir -p ./BUILDS/backend/dist
    - yarn workspace @TRPI/backend build
    - cp -r ./apps/backend/dist ./BUILDS/backend/dist

build_frontend:
  stage: build
  <<: *build_cache
  needs: ["build_core"]
  script:
    - mkdir -p ./BUILDS/frontend/dist
    - yarn workspace @TRPI/frontend build
    - cp -r ./apps/frontend/dist ./BUILDS/frontend/dist

deploy_frontend:
  stage: deploy
  only:
    - dev
  needs: ["build_frontend"]
  cache:
    key: ${CI_COMMIT_REF_SLUG}-builds
    paths:
      - ./BUILDS/
    policy: pull
  script:
    - pwd
    - ls -la ./BUILDS
    - ls -la ./BUILDS/frontend
    - sudo -u ubuntu screen -S frontend -X quit || true
    - sudo -u ubuntu screen -dmS frontend
    - sudo -u ubuntu screen -S frontend -X stuff "cd ./BUILDS/frontend/dist; npx serve -l 1000$(printf '\r')"
# deploy_backend:
#   stage: deploy
#   only:
#     - dev
#   needs: ["build_backend"]
#   script:
#     - sudo -u ubuntu screen -S backend -X quit || true
#     - sudo -u ubuntu screen -dmS backend
#     - echo 'deploiement du backend pas disponible pour l'instant
